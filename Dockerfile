# ================================
# ðŸ§± STAGE 1 â€” Build
# ================================
FROM oven/bun:1-alpine AS builder

WORKDIR /app

# Copia os manifests do monorepo
COPY package.json bun.lock* ./
COPY tsconfig.json ./

# Copia os manifests de cada pacote
COPY packages/shared/package.json packages/shared/
COPY packages/backend/package.json packages/backend/

# Copia o restante do cÃ³digo-fonte (incluindo schema.prisma)
COPY packages/shared packages/shared
COPY packages/backend packages/backend

# Instala todas as dependÃªncias
RUN bun install

# Gera Prisma Client
WORKDIR /app/packages/backend
RUN bunx prisma generate

# Build do pacote shared primeiro (dependÃªncia do backend)
WORKDIR /app/packages/shared
RUN bun run build

# Instala @nestjs/cli na raiz temporariamente para build
WORKDIR /app
RUN bun add -d @nestjs/cli

# Build do backend usando nest da raiz
WORKDIR /app/packages/backend
RUN ../../node_modules/.bin/nest build

# ================================
# ðŸš€ STAGE 2 â€” Production
# ================================
FROM oven/bun:1-alpine

WORKDIR /app

# Copia package.json da raiz
COPY --from=builder /app/package.json ./

# Copia estrutura completa do workspace para o bun resolver dependÃªncias
COPY --from=builder /app/packages ./packages

# Copia node_modules do builder (inclui @prisma/client e binÃ¡rios)
COPY --from=builder /app/node_modules ./node_modules

# Instala apenas dependÃªncias de produÃ§Ã£o
RUN bun install --production

# Gera Prisma Client antes de iniciar
WORKDIR /app/packages/backend
RUN ../../node_modules/.bin/prisma generate

# ExpÃµe a porta da aplicaÃ§Ã£o
EXPOSE 4000

# Executa migrations e inicia o app
CMD ["sh", "-c", "bunx prisma migrate deploy && bun run dist/main.js"]
